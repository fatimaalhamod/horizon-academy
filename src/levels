// src/pages/CourseLevelsPage.jsx
import React, { useState, useEffect } from 'react';

const CourseLevelsPage = ({ navigateTo, currentUser, handleLogout, course }) => {
  const [userProgress, setUserProgress] = useState({});
  const [selectedLevel, setSelectedLevel] = useState(null);
  const [showQuiz, setShowQuiz] = useState(false);
  const [quizAnswers, setQuizAnswers] = useState({});
  const [quizResults, setQuizResults] = useState(null);

  // ✅ تحديث تلقائي من localStorage كل 200ms
  useEffect(() => {
    const loadProgress = () => {
      const key = `progress_${currentUser.id}_${course.id}`;
      const saved = localStorage.getItem(key);
      if (saved) {
        try {
          const progress = JSON.parse(saved);
          setUserProgress(progress);
        } catch (e) {
          console.error("فشل في تحليل بيانات التقدم", e);
        }
      }
    };

    loadProgress();

    // 🔄 تحديث مستمر
    const interval = setInterval(loadProgress, 200);

    return () => clearInterval(interval);
  }, [currentUser.id, course.id]);

  // ✅ التحقق من حالة المستوى
  const isLevelLocked = (levelId) => {
    if (levelId === 1) return false;
    const prevLevelKey = `level_${levelId - 1}`;
    return !userProgress[prevLevelKey]?.completed;
  };

  const isLevelCompleted = (levelId) => {
    return userProgress[`level_${levelId}`]?.completed;
  };

  const startLevel = (level) => {
    if (isLevelLocked(level.id)) return;
    setSelectedLevel(level);
  };

  const startQuiz = () => {
    if (!selectedLevel) return;
    setShowQuiz(true);
    setQuizAnswers({});
    setQuizResults(null);
  };

  const handleAnswerChange = (questionId, answerIndex) => {
    setQuizAnswers(prev => ({ ...prev, [questionId]: answerIndex }));
  };

  const submitQuiz = () => {
    const quiz = selectedLevel.quiz;
    let correct = 0;
    quiz.forEach(q => {
      if (quizAnswers[q.id] === q.correctAnswer) correct++;
    });

    const score = (correct / quiz.length) * 100;
    const passed = score >= 60;

    setQuizResults({ score, passed });

    if (passed) {
      const levelKey = `level_${selectedLevel.id}`;
      const progressKey = `progress_${currentUser.id}_${course.id}`;
      const savedProgress = JSON.parse(localStorage.getItem(progressKey)) || {};

      const updatedProgress = {
        ...savedProgress,
        [levelKey]: { completed: true }
      };

      localStorage.setItem(progressKey, JSON.stringify(updatedProgress));
      setUserProgress(updatedProgress);
    }
  };

  const exitQuiz = () => {
    setShowQuiz(false);
    setQuizResults(null);
    setSelectedLevel(null);
  };

  const goBack = () => {
    if (showQuiz) {
      setShowQuiz(false);
      setQuizResults(null);
    } else if (selectedLevel) {
      setSelectedLevel(null);
    } else {
      navigateTo("course-details", course);
    }
  };

  // --- قائمة المستويات ---
  if (!selectedLevel && !showQuiz) {
    return (
      <div className="min-h-screen bg-gray-50">
        <header className="bg-indigo-700 text-white p-4 flex justify-between items-center">
          <button onClick={goBack} className="bg-white text-indigo-700 px-4 py-2 rounded-lg font-medium">← رجوع</button>
          <h1 className="text-xl font-bold">{course.title}</h1>
          <button onClick={handleLogout} className="text-sm underline">تسجيل خروج</button>
        </header>

        <main className="p-6">
          <div className="max-w-3xl mx-auto">
            <h2 className="text-2xl font-bold text-gray-800 mb-2">مستويات الدورة</h2>
            <p className="text-gray-600 mb-6">تابع تقدمك في كل مستوى.</p>

            <div className="space-y-4">
              {course.levels.map((level) => {
                const locked = isLevelLocked(level.id);
                const completed = isLevelCompleted(level.id);

                return (
                  <div
                    key={level.id}
                    className={`relative bg-white p-5 rounded-lg shadow-md transition-all ${
                      locked ? 'opacity-60' : 'hover:shadow-lg'
                    } ${!locked && !completed ? 'cursor-pointer' : ''}`}
                    onClick={() => !locked && !completed && startLevel(level)}
                  >
                    {locked && (
                      <div className="absolute inset-0 bg-black bg-opacity-20 rounded-lg flex items-center justify-center z-10">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                        </svg>
                      </div>
                    )}

                    <div className="relative z-0">
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-800">{level.title}</h3>
                          <p className="text-gray-600 mt-1">{level.description}</p>
                        </div>
                        <div className="text-right">
                          {completed ? (
                            <span className="inline-flex items-center px-3 py-1 bg-green-100 text-green-800 text-sm font-medium rounded-full">
                              ✅ مكتمل
                            </span>
                          ) : locked ? (
                            <span className="inline-flex items-center px-3 py-1 bg-gray-100 text-gray-600 text-sm font-medium rounded-full">
                              مقفل
                            </span>
                          ) : (
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                startLevel(level);
                              }}
                              className="bg-indigo-600 text-white px-4 py-1 rounded-lg text-sm"
                            >
                              ابدأ
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </main>
      </div>
    );
  }

  // --- عرض المحاضرات ---
  if (selectedLevel && !showQuiz) {
    return (
      <div className="min-h-screen bg-gray-50">
        <header className="bg-indigo-700 text-white p-4 flex justify-between items-center">
          <button onClick={goBack} className="bg-white text-indigo-700 px-4 py-2 rounded-lg font-medium">← رجوع</button>
          <h1 className="text-xl font-bold">{course.title}</h1>
          <button onClick={handleLogout} className="text-sm underline">تسجيل خروج</button>
        </header>

        <main className="p-6">
          <div className="max-w-3xl mx-auto bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-2">{selectedLevel.title}</h2>
            <p className="text-gray-600 mb-6">{selectedLevel.description}</p>

            <h3 className="text-lg font-semibold mb-4">المحاضرات:</h3>
            <div className="space-y-6">
              {selectedLevel.lectures.map((lecture) => (
                <div key={lecture.id} className="border rounded-lg overflow-hidden">
                  <h4 className="bg-gray-100 p-3 font-medium">{lecture.title}</h4>
                  <div className="aspect-w-16 aspect-h-9">
                    <iframe
                      src={lecture.videoUrl.replace("watch?v=", "embed/")}
                      title={lecture.title}
                      className="w-full h-60"
                      frameBorder="0"
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                      allowFullScreen
                    ></iframe>
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-8 text-center">
              <button
                onClick={startQuiz}
                className="bg-indigo-600 hover:bg-indigo-700 text-white px-8 py-3 rounded-lg font-medium transition"
              >
                ابدأ الاختبار النهائي
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  // --- عرض الاختبار ---
  if (showQuiz && selectedLevel) {
    const quiz = selectedLevel.quiz;

    if (quizResults) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full text-center">
            <h2 className="text-2xl font-bold mb-4">نتيجة الاختبار</h2>
            <p className={`text-xl font-semibold ${quizResults.passed ? 'text-green-600' : 'text-red-600'}`}>
              {quizResults.passed ? '🎉 اجتزت الاختبار!' : '❌ لم تجتز الاختبار'}
            </p>
            <p className="text-gray-600 mt-2">الدرجة: {Math.round(quizResults.score)}%</p>

            <div className="mt-6 space-x-4 space-x-reverse">
              <button
                onClick={exitQuiz}
                className="bg-indigo-600 text-white px-6 py-2 rounded-lg"
              >
                {quizResults.passed ? 'متابعة' : 'إعادة المحاولة'}
              </button>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="min-h-screen bg-gray-50">
        <header className="bg-indigo-700 text-white p-4 flex justify-between items-center">
          <button onClick={() => setShowQuiz(false)} className="bg-white text-indigo-700 px-4 py-2 rounded-lg font-medium">← الرجوع</button>
          <h1 className="text-xl font-bold">الاختبار - {selectedLevel.title}</h1>
          <button onClick={handleLogout} className="text-sm underline">تسجيل خروج</button>
        </header>

        <main className="p-6">
          <div className="max-w-3xl mx-auto">
            {quiz.map((q) => (
              <div key={q.id} className="bg-white p-5 rounded-lg shadow mb-4">
                <h3 className="font-bold text-lg mb-3">{q.question}</h3>
                <div className="space-y-2">
                  {q.options.map((option, idx) => (
                    <label key={idx} className="flex items-center space-x-2 space-x-reverse cursor-pointer">
                      <input
                        type="radio"
                        name={`q-${q.id}`}
                        value={idx}
                        onChange={() => handleAnswerChange(q.id, idx)}
                        className="ml-2"
                      />
                      <span>{option}</span>
                    </label>
                  ))}
                </div>
              </div>
            ))}

            <div className="mt-8 flex justify-end">
              <button
                onClick={submitQuiz}
                disabled={Object.keys(quizAnswers).length !== quiz.length}
                className="bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg font-medium"
              >
                تسليم
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }
};

export default CourseLevelsPage;